{"version":3,"sources":["components/pizza.jpg","components/Home.js","selectors/index.js","components/PizzaBase.js","actions/index.js","components/PizzaToppings.js","components/ReviewOrder.js","components/UserForm.js","App.js","serviceWorker.js","reducers/index.js","store.js","index.js"],"names":["module","exports","Home","props","className","to","id","onClick","handleClick","alt","src","require","getData","state","data","PizzaBase","handleChange","e","update","target","name","value","this","pizza","sauce","dough","type","checked","onChange","React","Component","connect","dispatch","inputId","updateBase","changeVisibility","setState","meats","Math","abs","vegetables","cheeses","isVisible","toppings","upArrow","downArrow","Cheeses","Meats","Vegtables","includes","updateToppings","ReviewOrder","map","item","user","email","phone","address","city","zip","UserForm","updateUser","required","placeholder","App","isActive","home","base","top","info","review","page","undefined","path","PizzaToppings","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","newForm","newBase","newTop","filter","push","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uLAAAA,EAAOC,QAAU,IAA0B,mC,yKCG5B,SAASC,EAAKC,GAGzB,OACI,yBAAKC,UAAU,QACX,+BACI,+BACI,4BACI,wBAAIA,UAAU,SACV,iEACA,yBAAKA,UAAU,QACX,kBAAC,IAAD,CAAMC,GAAG,SAAQ,4BAAQC,GAAG,OAAOF,UAAU,cAAcG,QAAS,kBAAMJ,EAAMK,YAAY,UAA3E,mBAGzB,wBAAIJ,UAAU,QACV,yBAAKK,IAAI,QAAQC,IAAKC,EAAQ,W,WClBnD,SAASC,EAAQC,GACpB,OAAOA,EAAMC,K,UCKXC,E,2MAGFC,aAAe,SAACC,GACZ,EAAKd,MAAMe,OAAOD,EAAEE,OAAOC,KAAMH,EAAEE,OAAOE,Q,wEAIpC,IAAD,EACkBC,KAAKnB,MAAMW,KAAKS,MAAhCC,EADF,EACEA,MAAOC,EADT,EACSA,MACd,OACI,yBAAKrB,UAAU,cACX,0CACA,8BACI,gDACA,yBAAKA,UAAU,aACX,2BAAOsB,KAAK,QAAQpB,GAAG,SAASc,KAAK,QAAQC,MAAM,OAAOM,QAAS,SAAWH,EAAOI,SAAUN,KAAKN,eACpG,6CAAyB,6BACzB,2BAAOU,KAAK,QAAQpB,GAAG,SAASc,KAAK,QAAQC,MAAM,SAASM,QAAS,WAAaH,EAAOI,SAAUN,KAAKN,eACxG,yDAAqC,6BACrC,2BAAOU,KAAK,QAAQpB,GAAG,MAAMc,KAAK,QAAQC,MAAM,QAAQM,QAAS,UAAYH,EAAOI,SAAUN,KAAKN,eACnG,8CAA0B,8BAG9B,oDACA,yBAAKZ,UAAU,aACX,2BAAOsB,KAAK,QAAQpB,GAAG,UAAUc,KAAK,QAAQC,MAAM,UAAUM,QAAS,YAAcF,EAAOG,SAAUN,KAAKN,eAC3G,0CAAsB,6BACtB,2BAAOU,KAAK,QAAQpB,GAAG,OAAOc,KAAK,QAAQC,MAAM,aAAaM,QAAS,eAAiBF,EAAOG,SAAUN,KAAKN,eAC9G,6CAAyB,6BACzB,2BAAOU,KAAK,QAAQpB,GAAG,OAAOc,KAAK,QAAQC,MAAM,YAAYM,QAAS,cAAgBF,EAAOG,SAAUN,KAAKN,eAC5G,4CAAwB,oC,GA/BxBa,IAAMC,WAqDfC,eAdS,SAAClB,GACrB,MAAO,CACHC,KAAMF,EAAQC,OAIK,SAACmB,GACxB,MAAO,CACHd,OAAQ,SAACe,EAASZ,GACdW,ECvCL,SAAoBC,EAASZ,GAChC,MAAO,CACHK,KAfmB,cAgBnBO,UACAZ,SDmCaa,CAAWD,EAASZ,QAK1BU,CAA6ChB,GEtDtDA,E,YACF,aAAe,IAAD,8BACV,+CAQJC,aAAe,SAACC,GACZ,EAAKd,MAAMe,OAAOD,EAAEE,OAAOC,KAAMH,EAAEE,OAAOE,QAVhC,EAcdc,iBAAmB,SAAClB,GACI,UAAhBA,EAAEE,OAAOb,IACT,EAAK8B,SAAS,CAACC,MAAOC,KAAKC,IAAI,EAAK1B,MAAMwB,MAAQ,KAClC,eAAhBpB,EAAEE,OAAOb,IACT,EAAK8B,SAAS,CAACI,WAAYF,KAAKC,IAAI,EAAK1B,MAAM2B,WAAa,KAC5C,YAAhBvB,EAAEE,OAAOb,IACT,EAAK8B,SAAS,CAACK,QAASH,KAAKC,IAAI,EAAK1B,MAAM4B,QAAU,MApBhD,EAwBdC,UAAY,SAAChB,GACT,OAA6B,IAArB,EAAKb,MAAMa,IAvBnB,EAAKb,MAAQ,CACT4B,QAAS,EACTJ,MAAO,EACPG,WAAY,GALN,E,sEA6BJ,IACEG,EAAarB,KAAKnB,MAAMW,KAAKS,MAA7BoB,SACFC,EAAU,yCACVC,EAAY,yCAElB,OACI,6BACI,8CACA,8BACI,wBAAIvC,GAAG,UAAUC,QAASe,KAAKa,kBAC1Bb,KAAKoB,UAAU,WAAaE,EAASC,EAD1C,WAICvB,KAAKoB,UAAU,WAAa,kBAACI,EAAD,CAASH,SAAUA,EAAU3B,aAAcM,KAAKN,eAAkB,KAE/F,wBAAIV,GAAG,QAAQC,QAASe,KAAKa,kBACxBb,KAAKoB,UAAU,SAAWE,EAASC,EADxC,SAKCvB,KAAKoB,UAAU,SAAW,kBAACK,EAAD,CAAOJ,SAAUA,EAAU3B,aAAcM,KAAKN,eAAkB,KAE3F,wBAAIV,GAAG,aAAaC,QAASe,KAAKa,kBAC7Bb,KAAKoB,UAAU,cAAgBE,EAAUC,EAD9C,cAICvB,KAAKoB,UAAU,cAAgB,kBAACM,EAAD,CAAWL,SAAUA,EAAU3B,aAAcM,KAAKN,eAAkB,W,GAxDhGa,IAAMC,WAiE9B,SAASgB,EAAT,GAA4C,IAA1BH,EAAyB,EAAzBA,SAAU3B,EAAe,EAAfA,aACxB,OACI,yBAAKZ,UAAU,aACX,2BAAOsB,KAAK,WAAWpB,GAAG,UAAUc,KAAK,WAAWC,MAAM,WAAWM,QAASgB,EAASM,SAAS,YAAarB,SAAUZ,IACvH,4CAAwB,6BACxB,2BAAOU,KAAK,WAAWpB,GAAG,UAAUc,KAAK,WAAWC,MAAM,OAAOM,QAASgB,EAASM,SAAS,QAASrB,SAAUZ,IAC/G,wCAAoB,8BAMhC,SAAS+B,EAAT,GAA0C,IAA1BJ,EAAyB,EAAzBA,SAAU3B,EAAe,EAAfA,aACtB,OACI,yBAAKZ,UAAU,aACX,2BAAOsB,KAAK,WAAWpB,GAAG,QAAQc,KAAK,WAAWC,MAAM,YAAYM,QAASgB,EAASM,SAAS,aAAcrB,SAAUZ,IACvH,6CAAyB,6BACzB,2BAAOU,KAAK,WAAWpB,GAAG,QAAQc,KAAK,WAAWC,MAAM,UAAUM,QAASgB,EAASM,SAAS,WAAYrB,SAAUZ,IACnH,2CAAuB,6BACvB,2BAAOU,KAAK,WAAWpB,GAAG,QAAQc,KAAK,WAAWC,MAAM,iBAAiBM,QAASgB,EAASM,SAAS,kBAAmBrB,SAAUZ,IACjI,kDAA8B,6BAC9B,2BAAOU,KAAK,WAAWpB,GAAG,QAAQc,KAAK,WAAWC,MAAM,QAAQM,QAASgB,EAASM,SAAS,SAAUrB,SAAUZ,IAC/G,yCAAqB,6BACrB,2BAAOU,KAAK,WAAWpB,GAAG,QAAQc,KAAK,WAAWC,MAAM,cAAcM,QAASgB,EAASM,SAAS,eAAgBrB,SAAUZ,IAC3H,+CAA2B,8BAMvC,SAASgC,EAAT,GAA8C,IAA1BL,EAAyB,EAAzBA,SAAU3B,EAAe,EAAfA,aAC1B,OACI,yBAAKZ,UAAU,aACX,2BAAOsB,KAAK,WAAWpB,GAAG,aAAac,KAAK,WAAWC,MAAM,cAAcM,QAASgB,EAASM,SAAS,eAAgBrB,SAAUZ,IAChI,+CAA2B,6BAC3B,2BAAOU,KAAK,WAAWpB,GAAG,aAAac,KAAK,WAAWC,MAAM,SAASM,QAASgB,EAASM,SAAS,UAAWrB,SAAUZ,IACtH,0CAAsB,6BACtB,2BAAOU,KAAK,WAAWpB,GAAG,aAAac,KAAK,WAAWC,MAAM,mBAAmBM,QAASgB,EAASM,SAAS,oBAAqBrB,SAAUZ,IAC1I,oDAAgC,6BAChC,2BAAOU,KAAK,WAAWpB,GAAG,aAAac,KAAK,WAAWC,MAAM,YAAYM,QAASgB,EAASM,SAAS,aAAcrB,SAAUZ,IAC5H,6CAAyB,6BACzB,2BAAOU,KAAK,WAAWpB,GAAG,aAAac,KAAK,WAAWC,MAAM,YAAYM,QAASgB,EAASM,SAAS,aAAcrB,SAAUZ,IAC5H,6CAAyB,8BAKrC,IAcee,eAdS,SAAClB,GACrB,MAAO,CACHC,KAAMF,EAAQC,OAIK,SAACmB,GACxB,MAAO,CACHd,OAAQ,SAACe,EAASZ,GACdW,EDtGL,SAAwBC,EAASZ,GACpC,MAAO,CACHK,KAvBuB,kBAwBvBO,UACAZ,SCkGa6B,CAAejB,EAASZ,QAK9BU,CAA6ChB,GC/HtDoC,E,iLAIE,IAAMrC,EAAOQ,KAAKnB,MAAMW,KACxB,OACI,yBAAKV,UAAU,cACX,4CACA,8BACI,sCACA,yBAAKA,UAAU,cACX,uBAAGA,UAAU,cAAa,yCAA1B,IAA6CU,EAAKS,MAAME,OACxD,uBAAGrB,UAAU,cAAa,0CAA1B,IAA8CU,EAAKS,MAAMC,OACzD,uBAAGpB,UAAU,cAAa,uCAA1B,KACA,wBAAIA,UAAU,WACbU,EAAKS,MAAMoB,SAASS,KAAI,SAAAC,GACrB,OAAO,4BAAKA,QAKpB,oDACA,yBAAKjD,UAAU,cACX,uBAAGA,UAAU,cAAa,mCAA1B,IAAuCU,EAAKwC,KAAKlC,MACjD,uBAAGhB,UAAU,cAAa,oCAA1B,IAAwCU,EAAKwC,KAAKC,OAClD,uBAAGnD,UAAU,cAAa,oCAA1B,IAAwCU,EAAKwC,KAAKE,OAClD,uBAAGpD,UAAU,cAAa,uCAC1B,wBAAIA,UAAU,WACV,4BAAI,uBAAGA,UAAU,cAAcU,EAAKwC,KAAKG,UACzC,4BAAI,uBAAGrD,UAAU,cAAcU,EAAKwC,KAAKI,KAA0B,KAApB5C,EAAKwC,KAAKzC,MAAe,IAAM,GAA1E,IAA+EC,EAAKwC,KAAKzC,MAAzF,IAAiGC,EAAKwC,KAAKK,c,GA7BjH9B,IAAMC,WA8CjBC,eANS,SAAClB,GACrB,MAAO,CACHC,KAAMF,EAAQC,MAIPkB,CAAyBoB,GC7ClCS,E,2MACF5C,aAAe,SAACC,GACZ,EAAKd,MAAM0D,WAAW5C,EAAEE,OAAOb,GAAIW,EAAEE,OAAOE,Q,wEAGtC,IAAD,EACmDC,KAAKnB,MAAMW,KAAKwC,KAAjElC,EADF,EACEA,KAAMmC,EADR,EACQA,MAAOE,EADf,EACeA,QAASC,EADxB,EACwBA,KAAM7C,EAD9B,EAC8BA,MAAO8C,EADrC,EACqCA,IAAKH,EAD1C,EAC0CA,MAC/C,OACI,6BACI,oDACA,8BACI,wBAAIpD,UAAU,cAAd,iCACA,yBAAKA,UAAU,cACX,wCAAoB,6BACpB,2BAAOsB,KAAK,OAAOpB,GAAG,OAAOe,MAAOD,EAAMQ,SAAUN,KAAKN,eAAe,6BACxE,iDAA6B,6BAC7B,2BAAOU,KAAK,OAAOpB,GAAG,QAAQe,MAAOkC,EAAOO,UAAQ,EAAClC,SAAUN,KAAKN,eAAe,6BACnF,kDAA8B,6BAC9B,2BAAOU,KAAK,OAAOpB,GAAG,UAAUe,MAAOoC,EAAS7B,SAAUN,KAAKN,eAAe,6BAC9E,wCAAoB,6BACpB,2BAAOU,KAAK,OAAOpB,GAAG,OAAOe,MAAOqC,EAAM9B,SAAUN,KAAKN,eAAe,6BACxE,yCAAqB,6BACrB,2BAAOU,KAAK,OAAOpB,GAAG,QAAQe,MAAOR,EAAOe,SAAUN,KAAKN,eAAe,6BAC1E,4CAAwB,6BACxB,2BAAOU,KAAK,OAAOpB,GAAG,MAAMe,MAAOsC,EAAK/B,SAAUN,KAAKN,eAAe,6BACtE,gDAA4B,6BAC5B,2BAAOU,KAAK,OAAOpB,GAAG,QAAQyD,YAAY,sBAAsB1C,MAAOmC,EAAO5B,SAAUN,KAAKN,eAAe,oC,GA1B7Ga,IAAMC,WAgDdC,eAdS,SAAClB,GACrB,MAAO,CACHC,KAAMF,EAAQC,OAIK,SAACmB,GACxB,MAAO,CACH6B,WAAY,SAAC5B,EAASZ,GAClBW,EH1CL,SAAoBC,EAASZ,GAChC,MAAO,CACHK,KAPmB,cAQnBO,UACAZ,SGsCawC,CAAW5B,EAASZ,QAK1BU,CAA6C6B,GCvCvCI,E,YACjB,aAAe,IAAD,8BACZ,+CAUFC,SAAW,SAAChD,GACV,OAAO,EAAKJ,MAAMI,EAAEE,OAAOb,KAZf,EAedE,YAAc,SAACS,GACb,EAAKmB,SAAS,CACZ8B,KAAM,WACNC,KAAM,WACNC,IAAK,WACLC,KAAM,WACNC,OAAQ,aAIV,IAAIC,OAAoBC,IAAbvD,EAAEE,OAAuB,OAASF,EAAEE,OAAOb,GAE1C,SAATiE,EACD,EAAKnC,SAAS,CAAC8B,KAAM,WACJ,SAATK,EACR,EAAKnC,SAAS,CAAC+B,KAAM,WACJ,QAATI,EACR,EAAKnC,SAAS,CAACgC,IAAK,WACH,SAATG,EACR,EAAKnC,SAAS,CAACiC,KAAM,WAErB,EAAKjC,SAAS,CAACkC,OAAQ,YAlCzB,EAAKzD,MAAQ,CACXqD,KAAM,SACNC,KAAM,WACNC,IAAK,WACLC,KAAM,WACNC,OAAQ,YAPE,E,sEAyCZ,OACE,kBAAC,IAAD,KACE,yBAAKlE,UAAU,YACb,6BACE,wBAAIA,UAAU,UACZ,wBAAIA,UAAU,SACZ,kBAAC,IAAD,CAAMC,GAAG,KAAI,4BAAQC,GAAG,OAAOF,UAAWkB,KAAKT,MAAMqD,KAAM3D,QAASe,KAAKd,aAA5D,UAEf,wBAAIJ,UAAU,SACZ,kBAAC,IAAD,CAAMC,GAAG,SAAQ,4BAAQC,GAAG,OAAOF,UAAWkB,KAAKT,MAAMsD,KAAM5D,QAASe,KAAKd,aAA5D,gBAEnB,wBAAIJ,UAAU,SACZ,kBAAC,IAAD,CAAMC,GAAG,aAAY,4BAAQC,GAAG,MAAMF,UAAWkB,KAAKT,MAAMuD,IAAK7D,QAASe,KAAKd,aAA1D,oBAEvB,wBAAIJ,UAAU,SACZ,kBAAC,IAAD,CAAMC,GAAG,aAAY,4BAAQC,GAAG,OAAOF,UAAWkB,KAAKT,MAAMwD,KAAM9D,QAASe,KAAKd,aAA5D,mBAEvB,wBAAIJ,UAAU,SACZ,kBAAC,IAAD,CAAMC,GAAG,WAAU,4BAAQC,GAAG,SAASF,UAAWkB,KAAKT,MAAMyD,OAAQ/D,QAASe,KAAKd,aAAhE,oBAKzB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiE,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,CAAMjE,YAAac,KAAKd,sB,GA/EPqB,IAAMC,WCFnB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCfAC,EAAe,CACb1B,KAAM,CACFlC,KAAM,GACNmC,MAAO,GACPE,QAAS,GACTC,KAAM,GACN7C,MAAO,GACP8C,IAAK,GACLH,MAAO,IAEXjC,MAAO,CACHC,MAAO,SACPC,MAAO,UACPkB,SAAU,KAuCtB,IAIesC,EAJEC,YAAgB,CAC7BpE,KApCJ,WAAgD,IAA/BD,EAA8B,uDAAtBmE,EAAcG,EAAQ,uCAC3C,OAAOA,EAAOzD,MAEV,INtBmB,cMuBf,IAAM0D,EAAO,eAAOvE,GAGpB,OAFAuE,EAAQ9B,KAAK6B,EAAOlD,SAAWkD,EAAO9D,MAE/B+D,EAGX,IN5BmB,cM6Bf,IAAMC,EAAO,eAAOxE,GAGpB,OAFAwE,EAAQ9D,MAAM4D,EAAOlD,SAAWkD,EAAO9D,MAEhCgE,EAGX,INlCuB,kBMmCnB,IAAIC,EAAM,eAAOzE,GAUjB,OARIyE,EAAO/D,MAAMoB,SAASM,SAASkC,EAAO9D,OAGtCiE,EAAO/D,MAAMoB,SAAW9B,EAAMU,MAAMoB,SAAS4C,QAAO,SAAAlC,GAChD,OAAOA,IAAS8B,EAAO9D,SAH3BiE,EAAO/D,MAAMoB,SAAS6C,KAAKL,EAAO9D,OAO/BiE,EAEX,QACI,OAAOzE,MC7CJ4E,EAFDC,YAAYT,EAAUU,YAAgBC,MCIpDC,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAERM,SAASC,eAAe,SHuHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.924b1d19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pizza.a04b2227.jpg\";","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport './css/Home.css'\r\nexport default function Home(props) {\r\n    \r\n    \r\n    return (\r\n        <div className='page'>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className='right'>\r\n                            <h3>Welcome to the Pizza Ordering App</h3>\r\n                            <div className='fill'>\r\n                                <Link to=\"/base\"><button id='base' className='orderButton' onClick={() => props.handleClick('base')}>Create Pizza</button></Link>\r\n                            </div>\r\n                        </td>\r\n                        <td className='left'>\r\n                            <img alt='pizza' src={require('./pizza.jpg')} />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","export function getData(state) {\r\n    return state.data;\r\n  }\r\n  \r\n  ","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { updateBase } from '../actions'\r\nimport { getData } from '../selectors';\r\nimport './css/PizzaBase.css'\r\n\r\nclass PizzaBase extends React.Component {\r\n\r\n    //handles form field changes\r\n    handleChange = (e) => {\r\n        this.props.update(e.target.name, e.target.value);\r\n    }\r\n    \r\n    //Render pizza base form, two sets of radio buttons\r\n    render() {\r\n        const {sauce, dough} = this.props.data.pizza;\r\n        return (\r\n            <div className='pageHolder'>\r\n                <h3>Pizza Base</h3>\r\n                <form>\r\n                    <h4>How much sauce? </h4>\r\n                    <div className='ingHolder'>\r\n                        <input type=\"radio\" id=\"little\" name=\"sauce\" value=\"Less\" checked={'Less' === sauce} onChange={this.handleChange}/>\r\n                        <label>Less sauce</label><br/>\r\n                        <input type=\"radio\" id=\"normal\" name=\"sauce\" value=\"Normal\" checked={'Normal' === sauce} onChange={this.handleChange}/>\r\n                        <label>Normal amount of sauce</label><br/>\r\n                        <input type=\"radio\" id=\"lot\" name=\"sauce\" value=\"Extra\" checked={'Extra' === sauce} onChange={this.handleChange}/>\r\n                        <label>Extra sauce</label><br/>\r\n                    </div>\r\n\r\n                    <h4>What type of crust? </h4>\r\n                    <div className='ingHolder'>\r\n                        <input type=\"radio\" id=\"classic\" name=\"dough\" value=\"Classic\" checked={'Classic' === dough} onChange={this.handleChange}/>\r\n                        <label>Classic</label><br/>\r\n                        <input type=\"radio\" id=\"thin\" name=\"dough\" value=\"Thin Crust\" checked={'Thin Crust' === dough} onChange={this.handleChange}/>\r\n                        <label>Thin Crust</label><br/>\r\n                        <input type=\"radio\" id=\"deep\" name=\"dough\" value=\"Deep Dish\" checked={'Deep Dish' === dough} onChange={this.handleChange}/>\r\n                        <label>Deep Dish</label><br/>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        data: getData(state)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        update: (inputId, value) => {\r\n            dispatch(updateBase(inputId, value))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PizzaBase);","\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\nexport const UPDATE_BASE = 'UPDATE_BASE';\r\nexport const UPDATE_TOPPINGS = 'UPDATE_TOPPINGS';\r\n\r\n//Update the user data in form on change\r\nexport function updateUser(inputId, value) {\r\n    return {\r\n        type: UPDATE_USER,\r\n        inputId,\r\n        value\r\n    }\r\n}\r\n\r\n//update pizza base form content on change\r\nexport function updateBase(inputId, value) {\r\n    return {\r\n        type: UPDATE_BASE,\r\n        inputId,\r\n        value\r\n    }\r\n}\r\n\r\n//update toppings array on change\r\nexport function updateToppings(inputId, value) {\r\n    return {\r\n        type: UPDATE_TOPPINGS,\r\n        inputId,\r\n        value\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { updateToppings } from '../actions';\r\nimport { getData } from '../selectors';\r\n\r\nclass PizzaBase extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            cheeses: 0,\r\n            meats: 1,\r\n            vegetables: 0\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.props.update(e.target.name, e.target.value);\r\n    }\r\n\r\n    //change category visibilty on click\r\n    changeVisibility = (e) => {\r\n        if (e.target.id === 'meats')\r\n            this.setState({meats: Math.abs(this.state.meats - 1)})\r\n        if (e.target.id === 'vegetables')\r\n            this.setState({vegetables: Math.abs(this.state.vegetables - 1)})\r\n        if (e.target.id === 'cheeses')\r\n            this.setState({cheeses: Math.abs(this.state.cheeses - 1)})\r\n    }\r\n\r\n    //is category visible\r\n    isVisible = (type) => {\r\n        return (this.state[type] === 1) \r\n    }\r\n    \r\n    //Render toppings form, list of checkbox\r\n    render() {\r\n        const { toppings } = this.props.data.pizza;\r\n        const upArrow = <span>&#9650; </span>\r\n        const downArrow = <span>&#9660; </span>\r\n\r\n        return (\r\n            <div>\r\n                <h3>Pizza Toppings</h3>\r\n                <form>\r\n                    <h4 id='cheeses' onClick={this.changeVisibility}>\r\n                        {this.isVisible('cheeses') ? upArrow: downArrow}\r\n                        Cheeses\r\n                    </h4>\r\n                    {this.isVisible('cheeses') ? <Cheeses toppings={toppings} handleChange={this.handleChange}/> : null}\r\n\r\n                    <h4 id='meats' onClick={this.changeVisibility}>\r\n                        {this.isVisible('meats') ? upArrow: downArrow}\r\n                        \r\n                        Meats\r\n                    </h4>\r\n                    {this.isVisible('meats') ? <Meats toppings={toppings} handleChange={this.handleChange}/> : null}\r\n\r\n                    <h4 id='vegetables' onClick={this.changeVisibility}>\r\n                        {this.isVisible('vegetables') ? upArrow : downArrow}\r\n                        Vegetables\r\n                    </h4>\r\n                    {this.isVisible('vegetables') ? <Vegtables toppings={toppings} handleChange={this.handleChange}/> : null}\r\n                    \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Cheeses checklist\r\nfunction Cheeses({toppings, handleChange}) {\r\n    return (\r\n        <div className='ingHolder'>\r\n            <input type=\"checkbox\" id='cheeses' name='toppings' value='Parmesan' checked={toppings.includes('Parmesan')} onChange={handleChange}/>\r\n            <label> Parmesan</label><br/>\r\n            <input type=\"checkbox\" id='cheeses' name='toppings' value='Feta' checked={toppings.includes('Feta')} onChange={handleChange}/>\r\n            <label> Feta</label><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Meats checklist\r\nfunction Meats({toppings, handleChange}) {\r\n    return (\r\n        <div className='ingHolder'>\r\n            <input type=\"checkbox\" id='meats' name='toppings' value='Pepperoni' checked={toppings.includes('Pepperoni')} onChange={handleChange}/>\r\n            <label> Pepperoni</label><br/>\r\n            <input type=\"checkbox\" id='meats' name='toppings' value='Sausage' checked={toppings.includes('Sausage')} onChange={handleChange}/>\r\n            <label> Sausage</label><br/>\r\n            <input type=\"checkbox\" id='meats' name='toppings' value='Canadian Bacon' checked={toppings.includes('Canadian Bacon')} onChange={handleChange}/>\r\n            <label> Canadian Bacon</label><br/>\r\n            <input type=\"checkbox\" id='meats' name='toppings' value='Bacon' checked={toppings.includes('Bacon')} onChange={handleChange}/>\r\n            <label> Bacon</label><br/>\r\n            <input type=\"checkbox\" id='meats' name='toppings' value='Ground Beef' checked={toppings.includes('Ground Beef')} onChange={handleChange}/>\r\n            <label> Ground Beef</label><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Veggies Checklist\r\nfunction Vegtables({toppings, handleChange}) {\r\n    return (\r\n        <div className='ingHolder'>\r\n            <input type=\"checkbox\" id='vegetables' name='toppings' value='Bell Pepper' checked={toppings.includes('Bell Pepper')} onChange={handleChange}/>\r\n            <label> Bell Pepper</label><br/>\r\n            <input type=\"checkbox\" id='vegetables' name='toppings' value='Tomato' checked={toppings.includes('Tomato')} onChange={handleChange}/>\r\n            <label> Tomato</label><br/>\r\n            <input type=\"checkbox\" id='vegetables' name='toppings' value='Artichoke Hearts' checked={toppings.includes('Artichoke Hearts')} onChange={handleChange}/>\r\n            <label> Artichoke Hearts</label><br/>\r\n            <input type=\"checkbox\" id='vegetables' name='toppings' value='Mushrooms' checked={toppings.includes('Mushrooms')} onChange={handleChange}/>\r\n            <label> Mushrooms</label><br/>\r\n            <input type=\"checkbox\" id='vegetables' name='toppings' value='Pineapple' checked={toppings.includes('Pineapple')} onChange={handleChange}/>\r\n            <label> Pineapple</label><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        data: getData(state)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        update: (inputId, value) => {\r\n            dispatch(updateToppings(inputId, value))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PizzaBase);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { getData } from '../selectors';\r\n\r\nclass ReviewOrder extends React.Component {\r\n\r\n    //get all the data from the store and displays it\r\n    render() {\r\n        const data = this.props.data;\r\n        return (\r\n            <div className='pageHolder'>\r\n                <h3>Review Order</h3>\r\n                <form>\r\n                    <h4>Order </h4>\r\n                    <div className='userFields'>\r\n                        <p className='reviewText'><b>Pizza Type</b> {data.pizza.dough}</p>\r\n                        <p className='reviewText'><b>Sauce Level</b> {data.pizza.sauce}</p>\r\n                        <p className='reviewText'><b>Toppings</b> </p>\r\n                        <ul className='ingList'>\r\n                        {data.pizza.toppings.map(item => {\r\n                            return <li>{item}</li>\r\n                        })} \r\n                        </ul>\r\n                    </div>\r\n\r\n                    <h4>Customer Information</h4>\r\n                    <div className='userFields'>\r\n                        <p className='reviewText'><b>Name</b> {data.user.name}</p>\r\n                        <p className='reviewText'><b>Email</b> {data.user.email}</p>\r\n                        <p className='reviewText'><b>Phone</b> {data.user.phone}</p>\r\n                        <p className='reviewText'><b>Address</b></p>\r\n                        <ul className='ingList'>\r\n                            <li><p className='reviewText'>{data.user.address}</p></li>\r\n                            <li><p className='reviewText'>{data.user.city}{data.user.state !== '' ? ',' : ''} {data.user.state} {data.user.zip}</p></li>\r\n                        </ul>\r\n                        \r\n                    </div>\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        data: getData(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ReviewOrder);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { updateUser } from '../actions'\r\nimport {getData } from '../selectors';\r\n\r\nclass UserForm extends React.Component {\r\n    handleChange = (e) => {\r\n        this.props.updateUser(e.target.id, e.target.value);\r\n    }\r\n\r\n    render() {\r\n        const {name, email, address, city, state, zip, phone} = this.props.data.user;\r\n        return(\r\n            <div>\r\n                <h3>Customer Information</h3>\r\n                <form>\r\n                    <h4 className='userHeader'>Please Enter Your Information</h4>\r\n                    <div className='userFields'>\r\n                        <label>Name </label><br/>\r\n                        <input type='text' id='name' value={name} onChange={this.handleChange}/><br/>\r\n                        <label>Email Address </label><br/>\r\n                        <input type='text' id='email' value={email} required onChange={this.handleChange}/><br/>\r\n                        <label>Street Address </label><br/>\r\n                        <input type='text' id='address' value={address} onChange={this.handleChange}/><br/>\r\n                        <label>City </label><br/>\r\n                        <input type='text' id='city' value={city} onChange={this.handleChange}/><br/>\r\n                        <label>State </label><br/>\r\n                        <input type='text' id='state' value={state} onChange={this.handleChange}/><br/>\r\n                        <label>Zip Code </label><br/>\r\n                        <input type='text' id='zip' value={zip} onChange={this.handleChange}/><br/>\r\n                        <label>Phone Number </label><br/>\r\n                        <input type='text' id='phone' placeholder=\"i.e. (555) 555-5555\" value={phone} onChange={this.handleChange}/><br/>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        data: getData(state)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateUser: (inputId, value) => {\r\n            dispatch(updateUser(inputId, value))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserForm);","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch, Route, Link\r\n} from \"react-router-dom\";\r\nimport './App.css'\r\n\r\nimport Home from './components/Home';\r\nimport PizzaBase from './components/PizzaBase';\r\nimport PizzaToppings from './components/PizzaToppings';\r\nimport ReviewOrder from './components/ReviewOrder';\r\nimport UserForm from './components/UserForm';\r\n\r\n//Router to navigate between pages\r\nexport default class App extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        home: 'active',\r\n        base: 'inactive',\r\n        top: 'inactive',\r\n        info: 'inactive',\r\n        review: 'inactive',\r\n      }\r\n    }\r\n\r\n    isActive = (e) => {\r\n      return this.state[e.target.id];\r\n    }\r\n\r\n    handleClick = (e) => {\r\n      this.setState({\r\n        home: 'inactive',\r\n        base: 'inactive',\r\n        top: 'inactive',\r\n        info: 'inactive',\r\n        review: 'inactive'\r\n      })\r\n\r\n      //handle page change from child screen\r\n      let page = e.target === undefined ? 'base' : e.target.id;\r\n\r\n      if(page === 'home') {\r\n        this.setState({home: 'active'})\r\n      } else if(page === 'base') {\r\n        this.setState({base: 'active'})\r\n      } else if(page === 'top') {\r\n        this.setState({top: 'active'})\r\n      } else if(page === 'info') {\r\n        this.setState({info: 'active'})\r\n      } else {\r\n        this.setState({review: 'active'})\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <Router>\r\n          <div className='outerDiv'>\r\n            <nav>\r\n              <ul className='navlst'>\r\n                <li className='navli'>\r\n                  <Link to=\"/\"><button id='home' className={this.state.home} onClick={this.handleClick}>Home</button></Link>\r\n                </li>\r\n                <li className='navli'>\r\n                  <Link to=\"/base\"><button id='base' className={this.state.base} onClick={this.handleClick}>Pizza Base</button></Link>\r\n                </li>\r\n                <li className='navli'>\r\n                  <Link to=\"/toppings\"><button id='top' className={this.state.top} onClick={this.handleClick}>Pizza Toppings</button></Link>\r\n                </li>\r\n                <li className='navli'>\r\n                  <Link to=\"/customer\"><button id='info' className={this.state.info} onClick={this.handleClick}>Customer Info</button></Link>\r\n                </li>\r\n                <li className='navli'>\r\n                  <Link to=\"/review\"><button id='review' className={this.state.review} onClick={this.handleClick}>Review Order</button></Link>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n\r\n            <Switch>\r\n              <Route path=\"/customer\">\r\n                <UserForm />\r\n              </Route>\r\n              <Route path=\"/review\">\r\n                <ReviewOrder />\r\n              </Route>\r\n              <Route path=\"/toppings\">\r\n                <PizzaToppings />\r\n              </Route>\r\n              <Route path=\"/base\">\r\n                <PizzaBase />\r\n              </Route>\r\n              <Route path=\"/\">\r\n                <Home handleClick={this.handleClick}/>\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      );\r\n    }\r\n  \r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { UPDATE_USER, UPDATE_BASE, UPDATE_TOPPINGS } from '../actions';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst initialState = {\r\n        user: {\r\n            name: '',\r\n            email: '',\r\n            address: '',\r\n            city: '',\r\n            state: '',\r\n            zip: '',\r\n            phone: ''\r\n        },\r\n        pizza: {\r\n            sauce: 'Normal',\r\n            dough: 'Classic',\r\n            toppings: []\r\n        }\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        //Updates the user data to edit.data\r\n        case UPDATE_USER:\r\n            const newForm = {...state}\r\n            newForm.user[action.inputId] = action.value;\r\n\r\n            return newForm\r\n\r\n        //updates the pizza base data\r\n        case UPDATE_BASE:\r\n            const newBase = {...state}\r\n            newBase.pizza[action.inputId] = action.value;\r\n\r\n            return newBase\r\n\r\n        //updates the toppings array, removing item if already in array\r\n        case UPDATE_TOPPINGS:\r\n            let newTop = {...state}\r\n           \r\n            if(!newTop.pizza.toppings.includes(action.value)) {\r\n                newTop.pizza.toppings.push(action.value);\r\n            } else {\r\n                newTop.pizza.toppings = state.pizza.toppings.filter(item => {\r\n                    return item !== action.value\r\n                })\r\n            }\r\n\r\n            return newTop\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst reducers = combineReducers({\r\n    data: reducer\r\n})\r\n\r\nexport default reducers;","import {createStore, applyMiddleware} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}